{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst btnStart = document.querySelector(\"button\");\nconst input = document.querySelector(\"#datetime-picker\")\nconst timerElements = document.querySelectorAll('[data-days], [data-hours], [data-minutes], [data-seconds]');\n\nlet userSelectedDate;\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n    onClose(selectedDates) {\n\n        if (selectedDates[0] > new Date()) {\n            userSelectedDate = selectedDates[0];\n            btnStart.disabled = false;\n        } else {\n            iziToast.error({\n                messageColor: 'white',\n                backgroundColor: \"#fc6056\",\n                position: \"topCenter\",\n                close: false,\n                icon: `icon-person`,\n                timeout: 2000,\n                iconWidth: 500,\n                imageWidth:2500,\n                message: 'Please choose a date in the future',\n            });\n            btnStart.disabled = true;\n        }\n   \n  },\n};\nflatpickr(\"#datetime-picker\", options);\n\n\nbtnStart.addEventListener(\"click\", () => timerOn());\n\n\nfunction timerOn() {\n    btnStart.disabled = true;\n    input.disabled = true;\n    const intervalTimer = setInterval(() => {\n        if ((userSelectedDate - new Date()) <= 0 ){\n            clearInterval(intervalTimer);\n            btnStart.disabled = false;\n            input.disabled = false;\n        } else {\n            let date = convertMs(userSelectedDate - new Date());\n            timerElements.forEach((element, index) => {\n                element.innerHTML = date[index];\n            });\n\n            \n        }\n  }, 1000);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = pad(Math.floor(ms / day));\n  const hours = pad(Math.floor((ms % day) / hour));\n  const minutes = pad(Math.floor(((ms % day) % hour) / minute));\n  const seconds = pad(Math.floor((((ms % day) % hour) % minute) / second));\n\n  return [days, hours, minutes, seconds];\n}\n\nfunction pad(value) {\n    return String(value).padStart(2, \"0\");\n}\n\n\n"],"names":["btnStart","input","timerElements","userSelectedDate","options","selectedDates","iziToast","flatpickr","timerOn","intervalTimer","date","convertMs","element","index","ms","days","pad","hours","minutes","seconds","value"],"mappings":"2FAKA,MAAMA,EAAW,SAAS,cAAc,QAAQ,EAC1CC,EAAQ,SAAS,cAAc,kBAAkB,EACjDC,EAAgB,SAAS,iBAAiB,2DAA2D,EAE3G,IAAIC,EACJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACf,QAAQC,EAAe,CAEfA,EAAc,CAAC,EAAI,IAAI,MACvBF,EAAmBE,EAAc,CAAC,EAClCL,EAAS,SAAW,KAEpBM,EAAS,MAAM,CACX,aAAc,QACd,gBAAiB,UACjB,SAAU,YACV,MAAO,GACP,KAAM,cACN,QAAS,IACT,UAAW,IACX,WAAW,KACX,QAAS,oCACzB,CAAa,EACDN,EAAS,SAAW,GAG7B,CACH,EACAO,EAAU,mBAAoBH,CAAO,EAGrCJ,EAAS,iBAAiB,QAAS,IAAMQ,EAAS,CAAA,EAGlD,SAASA,GAAU,CACfR,EAAS,SAAW,GACpBC,EAAM,SAAW,GACjB,MAAMQ,EAAgB,YAAY,IAAM,CACpC,GAAKN,EAAmB,IAAI,MAAW,EACnC,cAAcM,CAAa,EAC3BT,EAAS,SAAW,GACpBC,EAAM,SAAW,OACd,CACH,IAAIS,EAAOC,EAAUR,EAAmB,IAAI,IAAM,EAClDD,EAAc,QAAQ,CAACU,EAASC,IAAU,CACtCD,EAAQ,UAAYF,EAAKG,CAAK,CAC9C,CAAa,CAGJ,CACN,EAAE,GAAI,CACT,CAEA,SAASF,EAAUG,EAAI,CAMrB,MAAMC,EAAOC,EAAI,KAAK,MAAMF,EAAK,KAAG,CAAC,EAC/BG,EAAQD,EAAI,KAAK,MAAOF,EAAK,MAAO,IAAI,CAAC,EACzCI,EAAUF,EAAI,KAAK,MAAQF,EAAK,MAAO,KAAQ,GAAM,CAAC,EACtDK,EAAUH,EAAI,KAAK,MAASF,EAAK,MAAO,KAAQ,IAAU,GAAM,CAAC,EAEvE,MAAO,CAACC,EAAME,EAAOC,EAASC,CAAO,CACvC,CAEA,SAASH,EAAII,EAAO,CAChB,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACxC"}